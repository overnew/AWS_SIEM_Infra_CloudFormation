AWSTemplateFormatVersion: 2010-09-09

Parameters:
  InstanceType:
    Description: Instance Type for OpenSearch Cluster
    Type: String
    Default: m5.large.search

  InstanceCount:
    Description: Number of Instances for OpenSearch Cluster
    Type: Number
    Default: 2
  
  OSUsername:
    Description: Username of the OS Admin
    Type: String
    Default: mastermaster
  
  OSPassword:
    Description: Password of the OS Admin
    Type: String
    Default: 'Master1234$' 
  
  OSDomainName:
    Description: Domain name for OpenSearch
    Type: String
    Default: ldj-opensearch-test-domain 
    
Resources:
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: apiConnectKinesis
      #RetentionPeriodHours: Integer
      ShardCount: 1
      #StreamEncryption: 
      #  StreamEncryption
      #StreamModeDetails: 
      #  StreamModeDetails
      Tags:
        -
          Key: owner
          Value: ldj

  KinesisFirehoseDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn: [KinesisStream, FirehoseDeliveryRole, BackS3Bucket]
    Properties:
      AmazonopensearchserviceDestinationConfiguration: 
        BufferingHints: 
          IntervalInSeconds: 30
          SizeInMBs: 5
        CloudWatchLoggingOptions: 
          Enabled: true
          LogGroupName: opensearchPipe
          LogStreamName: opensearchStream
        #ClusterEndpoint: !Sub 'https://vpc-${OSDomainName}-274gdajy6lcu5uu2r7byb625rq.${AWS::Region}.es.amazonaws.com'
        DocumentIdOptions: 
          DefaultDocumentIdFormat: FIREHOSE_DEFAULT
        DomainARN: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}'
        IndexName: firehose
        IndexRotationPeriod: NoRotation
        #ProcessingConfiguration:   #여기서 람다로 변환 넣을 수 있다.
        #RetryOptions:  # kinesis가 오류일 때, 재사도 하는 시간 초
        #  AmazonopensearchserviceRetryOptions
        RoleARN: !GetAtt OpenSearchFirehoseDeliveryRole.Arn   # 역할!!!
        S3BackupMode: AllDocuments  # 모든 데이터 백업
        S3Configuration: 
          BucketARN: !GetAtt BackS3Bucket.Arn
          #BufferingHints: 
          #  IntervalInSeconds: 30
          #  SizeInMBs: 5
          #CloudWatchLoggingOptions: 
          CompressionFormat: ZIP
          #EncryptionConfiguration:  KMS 사용 시, 
          #  EncryptionConfiguration
          ErrorOutputPrefix: firehoseS3error
          Prefix: firehose
          RoleARN: !GetAtt OpenSearchFirehoseDeliveryRole.Arn
        #TypeName: String  #이건 무슨 타입일까?
        VpcConfiguration:  #opensearch가 위치하는 vpc 설명
          RoleARN: !GetAtt OpenSearchFirehoseDeliveryRole.Arn
          SecurityGroupIds: 
            - 'sg-024ce0304293464ec'
          SubnetIds: 
            - 'subnet-02c59928b96231787'     
      DeliveryStreamName: 'firehoseDeliver'
      DeliveryStreamType: KinesisStreamAsSource
      KinesisStreamSourceConfiguration: 
        KinesisStreamARN: !GetAtt KinesisStream.Arn
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn #!GetAtt
      #S3DestinationConfiguration: 
      #  BucketARN: !GetAtt S3Bucket.Arn
      #  BufferingHints: # 둘중 하나가 만족되면 전송
      #      IntervalInSeconds: 30
      #      SizeInMBs: 5
      #  #CloudWatchLoggingOptions: 
      #  #  CloudWatchLoggingOptions
      #  #CompressionFormat: String
      #  #EncryptionConfiguration: 
      #  #  EncryptionConfiguration
      #  #ErrorOutputPrefix: String
      #  #Prefix: String
      #  RoleARN: !GetAtt FirehoseDeliveryRole.Arn
      Tags:
        -
          Key: owner
          Value: ldj

  FirehoseDeliveryRole:
    Type: AWS::IAM::Role
    DependsOn: [KinesisStream, BackS3Bucket]
    Properties:
      RoleName: FirehoseDeliveryRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: #[firehose.amazonaws.com, s3.amazonaws.com]
                - firehose.amazonaws.com
            Action:
              - sts:AssumeRole
      #ManagedPolicyArns:
      #  - "arn:aws:iam::aws:policy/service-role/AmazonKinesisFirehoseDeliveryRolePolicy"  # Kinesis Firehose Delivery Role용 관리 정책
      Policies:
        - PolicyName: KinesisDescribeStreamPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                Resource:
                  - !GetAtt KinesisStream.Arn
        - PolicyName: S3FullAccess  #s3에 저장을 위한 권한
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:*', 's3-object-lambda:*']
                  #- 's3:*'
                Resource: '*'
                  #- !GetAtt S3Bucket.Arn  #'*'
        - PolicyName: KinesisFirehoseFullAccess  #KinesisFirehose 권한부여
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['firehose:*']
                Resource: '*'
        - PolicyName: KinesisFullAccess  #Kinesis 권한부여
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['kinesis:*']
                Resource: '*'
      Tags:
        -
          Key: owner
          Value: ldj

  OpenSearchFirehoseDeliveryRole:
    Type: AWS::IAM::Role
    DependsOn: [KinesisStream, BackS3Bucket]
    Properties:
      RoleName: OpenSearchFirehoseDeliveryRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: #[firehose.amazonaws.com, s3.amazonaws.com]
                - firehose.amazonaws.com
            Action:
              - sts:AssumeRole
      #ManagedPolicyArns:
      #  - "arn:aws:iam::aws:policy/service-role/AmazonKinesisFirehoseDeliveryRolePolicy"  # Kinesis Firehose Delivery Role용 관리 정책
      Policies:
        - PolicyName: S3FullAccess  #s3에 저장을 위한 권한
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:*', 's3-object-lambda:*']
                  #- 's3:*'
                Resource: '*'
                  #- !GetAtt S3Bucket.Arn  #'*'
        - PolicyName: aoss  #s3에 저장을 위한 권한
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['s3:*', 's3-object-lambda:*']
                  #- 's3:*'
                Resource: 
                  - !Sub 'arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:collection/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%'
        - PolicyName: Lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['lambda:InvokeFunction', 'lambda:GetFunctionConfiguration']
                Resource: 
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%'
        - PolicyName: ec2
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [ "ec2:DescribeVpcs","ec2:DescribeVpcAttribute","ec2:DescribeSubnets","ec2:DescribeSecurityGroups","ec2:DescribeNetworkInterfaces","ec2:CreateNetworkInterface","ec2:CreateNetworkInterfacePermission","ec2:DeleteNetworkInterface"]
                Resource: '*'
        - PolicyName: Opensearch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ["es:DescribeElasticsearchDomain","es:DescribeElasticsearchDomains","es:DescribeElasticsearchDomainConfig","es:ESHttpPost","es:ESHttpPut"]
                Resource: # ["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}","arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/*"]
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/*"
        - PolicyName: OpensearchGet
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ["es:ESHttpGet"]
                Resource: #["arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_all/_settings","arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_cluster/stats","arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/testindex/_mapping/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%","arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_nodes","arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_nodes/*/stats","arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_stats","arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/testindex/_stats"]
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_all/_settings"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_cluster/stats"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/testindex/_mapping/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_nodes"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_nodes/*/stats"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/_stats"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${OSDomainName}/testindex/_stats"
        - PolicyName: logPutter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ["logs:PutLogEvents"]
                Resource: '*'
                #["arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/openfirehose:log-stream:*","arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%:log-stream:*"]
        - PolicyName: KinesisFirehoseFullAccess  #KinesisFirehose 권한부여
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['firehose:*']
                Resource: '*'
        - PolicyName: KinesisFullAccess  #Kinesis 권한부여
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['kinesis:*']
                Resource: '*'
      Tags:
        -
          Key: owner
          Value: ldj

  BackS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Need to define a static BucketName due to a circular dependency with the AWS::SNS::TopicPolicy
      BucketName: 'fires3ddfos-openup'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: BucketOwnerFullControl
      LifecycleConfiguration:
        Rules:
          -
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 3
            NoncurrentVersionExpirationInDays: 3
            Status: Enabled
      #LoggingConfiguration:
      #  DestinationBucketName: !Ref S3BucketLogs
      #  LogFilePrefix: !Sub '/logs/${BucketName}/'
      #NotificationConfiguration:
      #  TopicConfigurations:
      #    -
      #      Event: s3:ObjectCreated:Put
      #      Topic: !Ref SNSTopic
      PublicAccessBlockConfiguration:  # 접근 정책
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        -
          Key: owner
          Value: ldj
      VersioningConfiguration:
        Status: Suspended # or Enabled
